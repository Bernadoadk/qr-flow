// QRFlow - Prisma schema for PostgreSQL
// Type : PostgreSQL
// Note : apr√®s ajout, ex√©cuter `npx prisma generate` puis `npx prisma migrate dev --name init`

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Exemple de DATABASE_URL:
  // postgresql://user:password@host:5432/qrflow-db
}

/////////////////////
// Enums
/////////////////////

/// Type de QR code
enum QRType {
  LINK          // redirige vers une URL
  PRODUCT       // redirige vers une page produit Shopify
  LOYALTY       // li√© √† un programme de fid√©lit√©
  CAMPAIGN      // QR rattach√© √† une campagne sp√©cifique
  
  // Shopify QR Codes
  HOMEPAGE      // redirige vers la page d'accueil Shopify
  COLLECTION    // redirige vers une collection Shopify
  ADD_TO_CART   // ajoute un produit au panier
  CHECKOUT      // redirige vers le checkout Shopify
  DISCOUNT      // applique un code promo Shopify
  
  // Custom QR Codes
  TEXT          // contient du texte brut
  EMAIL         // g√©n√®re un mailto: avec sujet et message
  PHONE         // g√©n√®re un tel: avec num√©ro
  SMS           // g√©n√®re un sms: avec num√©ro et message
}

/// Type d'√©v√©nement analytics
enum EventType {
  SCAN
  REDIRECT
  PURCHASE
  CLICK
  UPSELL_CLICK
  CROSS_SELL_CLICK
  PROMO_CODE_USED
}

/// Niveau d'abonnement merchant
enum Plan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

/////////////////////
// Models
/////////////////////

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Merchant {
  id            String    @id @default(cuid())
  shopifyDomain String    @unique                         // ex: myshop.myshopify.com
  accessToken   String?                                     // token OAuth (chiffrer si possible)
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relations
  qrcodes       QRCode[] 
  campaigns     Campaign[]
  loyalty       LoyaltyProgram?
  // optionally store settings (JSON)
  settings      Json? 

  @@map("merchants")
  @@index([plan])
}

model QRCode {
  id            String    @id @default(cuid())
  merchantId    String
  title         String
  slug          String?           @unique @db.VarChar(191) // optional short id usable dans l'URL public
  destination   String            // URL (ou product handle / custom payload)
  type          QRType            @default(LINK)
  color         String?           
  logoUrl       String?           
  style         Json?             // stockage des options graphiques (shape, dots, margin, etc.)
  scanCount     Int       @default(0)
  active        Boolean   @default(true)
  expiresAt     DateTime?          
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Upsell/Cross-sell configuration
  upsellConfig  Json?             // Configuration pour les suggestions de produits
  landingPage   Json?             // Configuration de la page d'atterrissage personnalis√©e

  // QR Code customization
  backgroundColor String?         // Couleur de fond du QR code
  foregroundColor String?         // Couleur principale du QR code
  backgroundImage String?         // Image d'arri√®re-plan
  frameStyle     Json?           // Style du cadre (couleur, √©paisseur, etc.)
  logoStyle      Json?           // Style du logo (taille, position, etc.)
  logoBackground Json?           // Configuration du fond du logo (couleur, forme, padding)
  designOptions  Json?           // Options de design (patterns, marqueurs, etc.)
  
  // Additional data for specific QR types
  additionalData Json?           // Donn√©es suppl√©mentaires selon le type (email, phone, etc.)

  // campaign relation
  campaignId    String? 
  campaign      Campaign? @relation(fields: [campaignId], references: [id])

  // back relation
  analytics     AnalyticsEvent[]

  merchant      Merchant  @relation(fields: [merchantId], references: [id])

  @@map("qrcodes")
  @@index([merchantId])
  @@index([slug])
  @@index([type])
}

model Campaign {
  id          String    @id @default(cuid())
  merchantId  String
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      String    @default("active") // active|paused|ended
  
  // üé® Design et branding
  primaryColor     String?   @default("#007b5c")
  primaryColorGradient     Boolean?  @default(false)
  primaryGradientColors     Json?     // Array of color strings
  primaryGradientDirection  String?   @default("to right")
  secondaryColor   String?   @default("#ffffff")
  secondaryColorGradient     Boolean?  @default(false)
  secondaryGradientColors     Json?     // Array of color strings
  secondaryGradientDirection  String?   @default("to right")
  backgroundColor  String?   @default("#f8f9fa")
  backgroundColorGradient     Boolean?  @default(false)
  backgroundGradientColors     Json?     // Array of color strings
  backgroundGradientDirection  String?   @default("to right")
  logoUrl         String?
  bannerUrl       String?
  backgroundImage String?   // Image de fond personnalis√©e
  // üé® Personnalisation des cartes
  cardBackgroundColor String?   @default("#ffffff")
  cardBackgroundGradient     Boolean?  @default(false)
  cardBackgroundGradientColors     Json?     // Array of color strings
  cardBackgroundGradientDirection  String?   @default("to right")
  cardBorderColor String?   @default("#e5e7eb")
  cardBorderWidth Int?      @default(1)
  cardBorderRadius Int?     @default(8)
  cardShadow String?        @default("lg")
  // üé® Personnalisation des mini-cartes (produits et offres)
  miniCardBackgroundColor String?   @default("#ffffff")
  miniCardBackgroundGradient     Boolean?  @default(false)
  miniCardBackgroundGradientColors     Json?     // Array of color strings
  miniCardBackgroundGradientDirection  String?   @default("to right")
  miniCardBorderColor String?   @default("#e5e7eb")
  miniCardBorderWidth Int?      @default(1)
  miniCardBorderRadius Int?     @default(8)
  miniCardShadow String?        @default("md")
  fontFamily      String?   @default("Inter")
  fontSize        Int?      @default(16)
  fontWeight      String?   @default("normal")
  
  // üìù Contenu dynamique
  mainOffer       String?   // Offre principale
  featuredProducts Json?    // Produits vedettes (array of product objects)
  specialOffers   Json?     // Offres exceptionnelles (array of offer objects)
  testimonials    Json?     // T√©moignages clients
  ctaText         String?   @default("D√©couvrir les offres")
  ctaButtonColor  String?   @default("#007b5c")
  ctaButtonColorGradient     Boolean?  @default(false)
  ctaButtonColorGradientColors     Json?     // Array of color strings
  ctaButtonColorGradientDirection  String?   @default("to right")
  
  // üéØ Objectifs et KPIs
  targetScans     Int?      @default(1000)
  targetSignups   Int?      @default(200)
  budget          Float?
  expectedROI     Float?
  
  // üîó Int√©grations
  googleAnalyticsId String?
  mailchimpListId   String?
  klaviyoListId     String?
  facebookPixelId    String?
  
  // üìä Analytics
  totalScans        Int      @default(0)
  totalSignups      Int      @default(0)
  conversionRate    Float    @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  qrcodes     QRCode[] 
  merchant    Merchant  @relation(fields: [merchantId], references: [id])

  @@map("campaigns")
  @@index([merchantId])
  @@index([status])
}

model LoyaltyProgram {
  id            String   @id @default(cuid())
  merchantId    String   @unique
  name          String
  description   String?
  pointsPerScan Int      @default(1)
  rewards       Json?    // structure JSON listant r√®gles / seuils / remises
  active        Boolean  @default(true)
  
  // üé® Personnalisation de la page loyalty
  primaryColor     String?   @default("#007b5c")
  primaryColorGradient     Boolean?  @default(false)
  primaryGradientColors     Json?     // Array of color strings
  primaryGradientDirection  String?   @default("to right")
  secondaryColor   String?   @default("#ffffff")
  secondaryColorGradient     Boolean?  @default(false)
  secondaryGradientColors     Json?     // Array of color strings
  secondaryGradientDirection  String?   @default("to right")
  backgroundColor  String?   @default("#f8f9fa")
  backgroundColorGradient     Boolean?  @default(false)
  backgroundGradientColors     Json?     // Array of color strings
  backgroundGradientDirection  String?   @default("to right")
  backgroundImage String?   // Image de fond personnalis√©e
  
  // üé® Personnalisation des cartes
  cardBackgroundColor String?   @default("#ffffff")
  cardBackgroundGradient     Boolean?  @default(false)
  cardBackgroundGradientColors     Json?     // Array of color strings
  cardBackgroundGradientDirection  String?   @default("to right")
  cardBorderColor String?   @default("#e5e7eb")
  cardBorderWidth Int?      @default(1)
  cardBorderRadius Int?     @default(8)
  cardShadow String?        @default("lg")
  
  // üé® Personnalisation des mini-cartes (tiers)
  miniCardBackgroundColor String?   @default("#ffffff")
  miniCardBackgroundGradient     Boolean?  @default(false)
  miniCardBackgroundGradientColors     Json?     // Array of color strings
  miniCardBackgroundGradientDirection  String?   @default("to right")
  miniCardBorderColor String?   @default("#e5e7eb")
  miniCardBorderWidth Int?      @default(1)
  miniCardBorderRadius Int?     @default(8)
  miniCardShadow String?        @default("md")
  
  // üé® Typographie
  fontFamily      String?   @default("Inter")
  fontSize        Int?       @default(16)
  fontWeight      String?    @default("normal")
  
  // üé® Boutons et CTA
  ctaButtonColor String?   @default("#007b5c")
  ctaButtonColorGradient     Boolean?  @default(false)
  ctaButtonColorGradientColors     Json?     // Array of color strings
  ctaButtonColorGradientDirection  String?   @default("to right")
  ctaText        String?   @default("D√©couvrir la boutique")
  
  // üé® Images et branding
  logoUrl         String?
  bannerUrl       String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  merchant      Merchant @relation(fields: [merchantId], references: [id])
  // optionally link customers points in a separate table in the future

  @@map("loyalty_programs")
  @@index([active])
}

model AnalyticsEvent {
  id         String    @id @default(cuid())
  qrId       String
  type       EventType @default(SCAN)
  meta       Json?     // donn√©es additionnelles (ip, userAgent, country, device, utm, shopifyOrderId)
  createdAt  DateTime  @default(now())

  qr         QRCode    @relation(fields: [qrId], references: [id])

  @@map("analytics_events")
  @@index([qrId])
  @@index([type])
  @@index([createdAt])
}

/////////////////////
// (Optionnel) Table customers / points
/////////////////////

model CustomerPoints {
  id          String   @id @default(cuid())
  merchantId  String
  customerId  String   // Shopify customer id (stringified) or email
  points      Int      @default(0)
  meta        Json?    // extra data (lastScanAt, source)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("customer_points")
  @@index([merchantId, customerId])
}

/////////////////////
// Audit / jobs / rate limits (optionnel)
/////////////////////

model WebhookLog {
  id         String   @id @default(cuid())
  merchantId String?
  topic      String
  payload    Json
  receivedAt DateTime @default(now())

  @@map("webhook_logs")
  @@index([merchantId])
}

model RateLimit {
  id         String   @id @default(cuid())
  merchantId String
  windowStart DateTime
  requests   Int      @default(0)

  @@map("rate_limits")
  @@index([merchantId, windowStart])
}

/////////////////////
// Loyalty Rewards System
/////////////////////

model CustomerRewards {
  id           String   @id @default(cuid())
  merchantId   String
  customerId   String   // Shopify customer ID or email
  tier         String   // Bronze, Silver, Gold, Platinum
  activeRewards Json    // ["discount_10", "free_shipping", "exclusive_access"]
  discountCode String?  // Code g√©n√©r√© automatiquement (ex: "SILVER10")
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([merchantId, customerId])
  @@index([merchantId, tier])
  @@map("customer_rewards")
}

model RewardTemplates {
  id          String   @id @default(cuid())
  merchantId  String
  tier        String   // Bronze, Silver, Gold, Platinum
  rewardType  String   // "discount", "free_shipping", "exclusive_product", "early_access"
  value       Json     // Configuration sp√©cifique (percentage, productIds, etc.)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([merchantId, tier, rewardType])
  @@index([merchantId, tier])
  @@map("reward_templates")
}

model ShopifyDiscountCodes {
  id           String   @id @default(cuid())
  merchantId   String
  customerId   String
  tier         String
  code         String   // Code Shopify g√©n√©r√©
  shopifyId    String   // ID du code de r√©duction dans Shopify
  percentage   Int?     // Pourcentage de r√©duction
  expiresAt    DateTime?
  isUsed       Boolean  @default(false)
  usedAt       DateTime?
  createdAt    DateTime @default(now())

  @@unique([merchantId, customerId, tier])
  @@index([merchantId, code])
  @@map("shopify_discount_codes")
}